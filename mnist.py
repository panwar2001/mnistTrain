# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1crbQ46k7SX2wuQ2CAfSOKhsmxU_pRAV1
"""

import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Preprocess the data
x_train = x_train.reshape(60000, 28, 28, 1).astype('float32') / 255
x_test = x_test.reshape(10000, 28, 28, 1).astype('float32') / 255
y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)

# Build the CNN model
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(10, activation='softmax'))

# Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.fit(x_train, y_train, batch_size=128, epochs=15, verbose=1, validation_data=(x_test, y_test))




import keras
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Load the model
model = keras.models.load_model('model.h5')

# Load the MNIST dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()

# Define the predict function
def predict(image):
  """Predicts the class of an image.

  Args:
    image: A 28x28 grayscale image.

  Returns:
    The predicted class of the image.
  """

  # Preprocess the image.
  image = image.reshape(28, 28, 1).astype('float32') / 255

  # Predict the class of the image.
  prediction = model.predict(image)

  # Get the index of the highest probability class.
  predicted_class = prediction.argmax()

  # Return the predicted class.
  return predicted_class

# Load an image
image = x_train[0]

# Predict the class of the image
predicted_class = predict(image)

# Print the predicted class
print(predicted_class)